// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: point_cloud.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "point_cloud.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pcl {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* PointCloud_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCloud_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointCloudXYZL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointCloudXYZL_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_point_5fcloud_2eproto() {
  protobuf_AddDesc_point_5fcloud_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "point_cloud.proto");
  GOOGLE_CHECK(file != NULL);
  PointCloud_descriptor_ = file->message_type(0);
  static const int PointCloud_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, is_dense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, points_),
  };
  PointCloud_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointCloud_descriptor_,
      PointCloud::default_instance_,
      PointCloud_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloud, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointCloud));
  PointCloudXYZL_descriptor_ = file->message_type(1);
  static const int PointCloudXYZL_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZL, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZL, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZL, is_dense_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZL, points_),
  };
  PointCloudXYZL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointCloudXYZL_descriptor_,
      PointCloudXYZL::default_instance_,
      PointCloudXYZL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointCloudXYZL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointCloudXYZL));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_point_5fcloud_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointCloud_descriptor_, &PointCloud::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointCloudXYZL_descriptor_, &PointCloudXYZL::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_point_5fcloud_2eproto() {
  delete PointCloud::default_instance_;
  delete PointCloud_reflection_;
  delete PointCloudXYZL::default_instance_;
  delete PointCloudXYZL_reflection_;
}

void protobuf_AddDesc_point_5fcloud_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pcl::msgs::protobuf_AddDesc_point_5ftype_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021point_cloud.proto\022\010pcl.msgs\032\020point_typ"
    "e.proto\"a\n\nPointCloud\022\r\n\005width\030\001 \002(\r\022\016\n\006"
    "height\030\002 \002(\r\022\020\n\010is_dense\030\003 \002(\010\022\"\n\006points"
    "\030\004 \003(\0132\022.pcl.msgs.PointXYZ\"f\n\016PointCloud"
    "XYZL\022\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\022\020\n\010i"
    "s_dense\030\003 \002(\010\022#\n\006points\030\004 \003(\0132\023.pcl.msgs"
    ".PointXYZL", 250);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "point_cloud.proto", &protobuf_RegisterTypes);
  PointCloud::default_instance_ = new PointCloud();
  PointCloudXYZL::default_instance_ = new PointCloudXYZL();
  PointCloud::default_instance_->InitAsDefaultInstance();
  PointCloudXYZL::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_point_5fcloud_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_point_5fcloud_2eproto {
  StaticDescriptorInitializer_point_5fcloud_2eproto() {
    protobuf_AddDesc_point_5fcloud_2eproto();
  }
} static_descriptor_initializer_point_5fcloud_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointCloud::kWidthFieldNumber;
const int PointCloud::kHeightFieldNumber;
const int PointCloud::kIsDenseFieldNumber;
const int PointCloud::kPointsFieldNumber;
#endif  // !_MSC_VER

PointCloud::PointCloud()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointCloud::InitAsDefaultInstance() {
}

PointCloud::PointCloud(const PointCloud& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointCloud::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  is_dense_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointCloud::~PointCloud() {
  SharedDtor();
}

void PointCloud::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointCloud::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloud::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCloud_descriptor_;
}

const PointCloud& PointCloud::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_point_5fcloud_2eproto();
  return *default_instance_;
}

PointCloud* PointCloud::default_instance_ = NULL;

PointCloud* PointCloud::New() const {
  return new PointCloud;
}

void PointCloud::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
    is_dense_ = false;
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointCloud::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_dense;
        break;
      }

      // required bool is_dense = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));
          set_has_is_dense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        break;
      }

      // repeated .pcl.msgs.PointXYZ points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointCloud::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required bool is_dense = 3;
  if (has_is_dense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_dense(), output);
  }

  // repeated .pcl.msgs.PointXYZ points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointCloud::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required bool is_dense = 3;
  if (has_is_dense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_dense(), target);
  }

  // repeated .pcl.msgs.PointXYZ points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointCloud::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required bool is_dense = 3;
    if (has_is_dense()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pcl.msgs.PointXYZ points = 4;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloud::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointCloud* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointCloud*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointCloud::MergeFrom(const PointCloud& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_is_dense()) {
      set_is_dense(from.is_dense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointCloud::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloud::CopyFrom(const PointCloud& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void PointCloud::Swap(PointCloud* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(is_dense_, other->is_dense_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointCloud::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCloud_descriptor_;
  metadata.reflection = PointCloud_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointCloudXYZL::kWidthFieldNumber;
const int PointCloudXYZL::kHeightFieldNumber;
const int PointCloudXYZL::kIsDenseFieldNumber;
const int PointCloudXYZL::kPointsFieldNumber;
#endif  // !_MSC_VER

PointCloudXYZL::PointCloudXYZL()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointCloudXYZL::InitAsDefaultInstance() {
}

PointCloudXYZL::PointCloudXYZL(const PointCloudXYZL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointCloudXYZL::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  is_dense_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointCloudXYZL::~PointCloudXYZL() {
  SharedDtor();
}

void PointCloudXYZL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointCloudXYZL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointCloudXYZL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointCloudXYZL_descriptor_;
}

const PointCloudXYZL& PointCloudXYZL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_point_5fcloud_2eproto();
  return *default_instance_;
}

PointCloudXYZL* PointCloudXYZL::default_instance_ = NULL;

PointCloudXYZL* PointCloudXYZL::New() const {
  return new PointCloudXYZL;
}

void PointCloudXYZL::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    width_ = 0u;
    height_ = 0u;
    is_dense_ = false;
  }
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointCloudXYZL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_dense;
        break;
      }

      // required bool is_dense = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dense:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dense_)));
          set_has_is_dense();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        break;
      }

      // repeated .pcl.msgs.PointXYZL points = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_points;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointCloudXYZL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // required bool is_dense = 3;
  if (has_is_dense()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_dense(), output);
  }

  // repeated .pcl.msgs.PointXYZL points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointCloudXYZL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // required bool is_dense = 3;
  if (has_is_dense()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_dense(), target);
  }

  // repeated .pcl.msgs.PointXYZL points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointCloudXYZL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required bool is_dense = 3;
    if (has_is_dense()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pcl.msgs.PointXYZL points = 4;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointCloudXYZL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointCloudXYZL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointCloudXYZL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointCloudXYZL::MergeFrom(const PointCloudXYZL& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_is_dense()) {
      set_is_dense(from.is_dense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointCloudXYZL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointCloudXYZL::CopyFrom(const PointCloudXYZL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloudXYZL::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void PointCloudXYZL::Swap(PointCloudXYZL* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(is_dense_, other->is_dense_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointCloudXYZL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointCloudXYZL_descriptor_;
  metadata.reflection = PointCloudXYZL_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace pcl

// @@protoc_insertion_point(global_scope)
